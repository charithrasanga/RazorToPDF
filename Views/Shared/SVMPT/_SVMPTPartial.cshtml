@using RazorToPDF.ViewModels

@model RazorToPDF.Views.Shared.SVMPT._SVMPTPartialModel
@{
}
<div class="print-row py-2 mt-4 ">
    <div class="col">
        <label for="StudentName" class="form-label">Student</label>
        <input type="text"
               class="form-control"
               id="StudentName"
               value="@(!string.IsNullOrEmpty(Model.svmptData.Student) ? Model.svmptData.Student : string.Empty)" />
    </div>
    <div class="col">
        <label for="studentDateDateAdministered" class="form-label">Date Administered</label>
        <input type="text"
               class="form-control"
               id="studentDateDateAdministered"
               value="@(!string.IsNullOrEmpty(Model.svmptData.DateAdministrated.ToString()) ? Model.svmptData.DateAdministrated : string.Empty)" />
    </div>
    <div class="col">
        <label for="studentAdministeredBy" class="form-label">Administered by</label>
        <input type="text"
               class="form-control"
               id="studentAdministeredBy"
               value="@(!string.IsNullOrEmpty(Model.svmptData.AdministratedBy) ? Model.svmptData.AdministratedBy : string.Empty)" />
    </div>
</div>

<div class="px-3 py-2 blue_box mt-4 border border-2 bg-opacity-10">
    <div class="print-row ">
        <div class="col">
            <p class="form-label">Typical Duration (minutes)</p>
            <p>15</p>
        </div>
        <div class="col-7 me-3">
            <label for="actualDuration" class="form-label">Actual Duration</label>
            <input type="number"
                   class="form-control"
                   id="actualDuration"
                   value="@(!string.IsNullOrEmpty(Model.svmptData.ActualDuration.ToString()) ? Model.svmptData.ActualDuration : string.Empty)" />
        </div>
    </div>
</div>

<div class="px-3 py-2 mt-4 ash_box border border-2">
    <div class="d-flex flex-row">
        <div><p class="fs-5 fw-bold form-label">Test Purpose</p></div>
        <div class="green_line"></div>
    </div>
    <p>This test identifies those who may be at risk for various forms of visual perceptual difficulties where eye-hand coordination is involved</p>
</div>

<div class="px-3 py-2 blue_box mt-4 border border-2 bg-opacity-10">
    <div>
        <div class="d-flex flex-row">
            <p class="fs-5 fw-bold form-label">Directions / Test Specific Observations</p>
            <div class="green_line"></div>
        </div>
    </div>
    <div>
        <div>
            <div class="heading_size">A. DIRECTIONS</div>
            <div class="print-row list_size">
                <div class="px-4">
                    <p class="mb-0">
                        1. Give him the test booklet <br>
                        2. Says,
                    </p>
                    <ul class="italic_font">
                        <li>This is a test to measure your hand-eye coordination.,</li>
                        <li>Copy as many figures as you are able.</li>
                        <li>Copy each figure three times in the boxes marked a, b, and c.</li>
                        <li>Use a pencil and not ink.</li>
                        <li>Don't use a ruler, compass or other aid, Do not sketch the figures.</li>
                        <li>Do not erase If you should make a mistake, draw heavy lines to show corrections”</li>
                    </ul>
                </div>
                <div class="px-4">
                    <p class="mb-0">3. Point as you speak to him:</p>
                    <ul class="italic_font mb-1">
                        <li> “Try to copy the lines, curves and angles just the way you see them without    making mistakes</li>
                        <li>There is no time limit so don't feel hurried, but you should not waste time		</li>
                        <li> Copy as many drawings as you can</li>
                        <li>There are 14 drawings	 Do your best.”</li>
                    </ul>
                    <P class="fw-medium">He should copy as many drawings as student can.</P>
                </div>
            </div>
        </div>
        <div>
            <div class="heading_size">B. TEST SPECIFIC OBSERVATIONS</div>
            <div class="print-row list_size">
                <div class="col-4 ps-3">
                    <p class="mb-1">1. Student's Effort was :</p>
                    <div class="d-flex flex-column ms-4 checkBox-label">
                        @foreach (EffortRate effortRate in Enum.GetValues(typeof(EffortRate)))
                        {
                            var isChecked = Model.svmptData.EffortRate.Equals(effortRate);
                            var randomInputId = RandomStringHelper.GenerateRandomUniqueString(5);
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="@randomInputId" @(isChecked ? "checked" : "") value="@effortRate.ToString()">
                                <label class="form-check-label" for="@randomInputId">@effortRate.ToString().ToProperCase()</label>
                            </div>
                        }
                        @* <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Very Poor">
                            <label class="form-check-label" for="inlineCheckbox1">Very Poor</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" checked value="Poor">
                            <label class="form-check-label" for="inlineCheckbox1">Poor</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Average">
                            <label class="form-check-label" for="inlineCheckbox1">Average</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Good">
                            <label class="form-check-label" for="inlineCheckbox1">Good</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Very Good">
                            <label class="form-check-label" for="inlineCheckbox1">Very Good</label>
                        </div> *@
                    </div>
                </div>
                <div class="col px-0">
                    <p class="mb-1">2. Attention Span :</p>
                    <div class="d-flex flex-column ms-4 checkBox-label">
                        @foreach (EffortRate effortRate in Enum.GetValues(typeof(EffortRate)))
                        {
                            var isChecked = Model.svmptData.EffortRate.Equals(effortRate);
                            var randomInputId = RandomStringHelper.GenerateRandomUniqueString(5);
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="@randomInputId" @(isChecked ? "checked" : "") value="@effortRate.ToString()">
                                <label class="form-check-label" for="@randomInputId">@effortRate.ToString().ToProperCase()</label>
                            </div>
                        }
                        @* <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Very Poor">
                            <label class="form-check-label" for="inlineCheckbox1">Very Poor</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" checked value="Poor">
                            <label class="form-check-label" for="inlineCheckbox1">Poor</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Average">
                            <label class="form-check-label" for="inlineCheckbox1">Average</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Good">
                            <label class="form-check-label" for="inlineCheckbox1">Good</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Very Good">
                            <label class="form-check-label" for="inlineCheckbox1">Very Good</label>
                        </div> *@
                    </div>
                </div>
                <div class="col-5 ps-3">
                    <p class="mb-1">3. Did student Exhibit frustration?</p>
                    <div class="ms-4 ">
                        @foreach (ExhibitFrustration exhibitFrustration in Enum.GetValues(typeof(ExhibitFrustration)))
                        {
                            var isChecked = Model.svmptData.ExhibitFrustration.Equals(exhibitFrustration);
                            var randomInputId = RandomStringHelper.GenerateRandomUniqueString(2);
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" id="@randomInputId" @(isChecked ? "checked" : "") value="@exhibitFrustration.ToString()">
                                <label class="form-check-label" for="@randomInputId">@exhibitFrustration.ToString().ToProperCase()</label>
                            </div>
                        }
                    </div>
                    <div class="mt-5">
                        <label for="studentLastName" class="fw-light">4. This test Administered by and responses recorded by :</label>
                        <input type="text"
                               class="form-control"
                               id="Walter"
                               value="@(!string.IsNullOrEmpty(Model.svmptData.ResponseBy) ? Model.svmptData.ResponseBy : string.Empty)" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="pagebreak"> </div>

<div class="py-2 mt-4 ash_box border border-2">
    <div class="ms-3 col-11">
        <div class="d-flex flex-row">
            <div><p class="fs-5 fw-bold form-label">General Questions</p></div>
            <div class="green_line"></div>
        </div>
        <div>
            <label class="form-label">Do you know what we do here?</label>
            <div class="col checkbox-label">
                @foreach (KnowWhatToDo knowWhatToDo in Enum.GetValues(typeof(KnowWhatToDo)))
                {
                    var isChecked = Model.svmptData.KnowWhatToDo.Equals(knowWhatToDo);
                    var randomInputId = RandomStringHelper.GenerateRandomUniqueString(3);
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="@randomInputId" @(isChecked ? "checked" : "") value="@knowWhatToDo.ToString()">
                        <label class="form-check-label" for="@randomInputId">@knowWhatToDo.ToString().ToProperCase()</label>
                    </div>
                }
            </div>
        </div>
        <div class="py-2 myContainer">
            <span class="form-label">Student Comment</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Paragraph) ? Model.svmptData.Paragraph : string.Empty)
                </p>

            </div>
        </div>
        <div class="py-2 myContainer">
            <span class="form-label">How do you feel about getting help here?</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Paragraph) ? Model.svmptData.Paragraph : string.Empty)
                </p>
            </div>
        </div>
        <div class="py-2 myContainer">
            <span class="form-label">What do you like to do in your spare time? (Sport, Club,etc.)</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Paragraph) ? Model.svmptData.Paragraph : string.Empty)
                </p>
            </div>
        </div>
        <div class="py-2">
            <label class="form-label">Do you like or dislike going to school?</label>
            <div class="col checkbox-label">
                @foreach (Likability likability in Enum.GetValues(typeof(Likability)))
                {
                    var isChecked = Model.svmptData.Likability.Equals(likability);
                    var randomInputId = RandomStringHelper.GenerateRandomUniqueString(3);
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="@randomInputId" @(isChecked ? "checked" : "") value="@likability.ToString()">
                        <label class="form-check-label" for="@randomInputId">@likability.ToString().ToProperCase()</label>
                    </div>
                }
                @* <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="Like it">
                    <label class="form-check-label" for="likeIt">Like it</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox2" checked value="No">
                    <label class="form-check-label" for="it'sOkay">It's okay</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="Dislike it">
                    <label class="form-check-label" for="dislikeIt">Dislike it</label>
                </div> *@
            </div>
        </div>
        <div class="py-2 myContainer">
            <span class="form-label">Why</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Paragraph) ? Model.svmptData.Paragraph : string.Empty)
                </p>
            </div>
        </div>
        <div class="py-2 myContainer">
            <span class="form-label">What do you like or dislike about school?</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Sentense) ? Model.svmptData.Sentense : string.Empty)
                </p>
            </div>
        </div>
    </div>
</div>

<div class="pagebreak"> </div>

<div class="print-row py-2  mt-4 ash_box border border-2">
    <div class="ms-3 col-11">
        <div class="py-2">
            <span class="form-label">Additional Comments</span>
            <div class="border border-black rounded-1 mt-2">
                <p class="m-3">
                    @(!string.IsNullOrEmpty(Model.svmptData.Paragraph) ? Model.svmptData.Paragraph : string.Empty)
                </p>
            </div>
        </div>
    </div>
</div>

<div class="py-2 blue_box mt-4 border border-2 bg-opacity-10">
    <div class="ms-3">
        <div class="d-flex flex-row">
            <div><p class="fs-5 fw-bold">Next Test</p></div>
            <div class="green_line"></div>
        </div>
        <div class="print-row">
            <div class="col-3">
                <span>Pre - K to 3:</span>
                <p class="text-secondary">WOLD</p>
            </div>
            <div class="col-3">
                <span>4 to 12:</span>
                <p class="text-secondary">HSWA</p>
            </div>
            <div class="col me-5">
                <span>If he is in grade 4 or above and he is unable to complete all figures on the SVMPT through his age level, administer the WOLD</span>
            </div>
        </div>
    </div>
</div>